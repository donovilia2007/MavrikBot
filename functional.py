import random
from aiogram import types, F, Router, Dispatcher, Bot
from aiogram.types import Message, ContentType, Chat
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

router = Router()
f = open("TOKEN.txt")
token = f.read()
dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=token, parse_mode=ParseMode.HTML)

with open("stickers.txt") as file:
    stickers = file.readline().split(',')

@router.message(Command("start"))
async def start_message(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–≤—Ä–∏–∫! –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–±—Ä–µ–Ω—å–∫–∏–π –∫–æ—Ç–∏–∫, –∂–∏–≤—É—â–∏–π —Å–∞–º–æ–π –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω—å—é) –ù–∞–¥–µ—é—Å—å, –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è!üò∏‚ù§Ô∏è\n\n–ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª -> @How_Mavrik_was_made")

@router.message(Command("mute"))
async def mute(msg: Message):
    if (msg.chat.type != "supergroup"):
        await msg.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    else:
        chat_id = msg.chat.id
        person_id = msg.from_user.id
        person = await bot.get_chat_member(chat_id, person_id)
        if (person.can_restrict_members == True or person.status == 'creator'):
                sms = msg.text.split(" ")
                await msg.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –°–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –º–æ–∂–Ω–æ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ -> @How_Mavrik_was_made")
                #await bot.restrict_chat_member()
        else:
            await msg.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
@router.message(F.new_chat_members)
async def hello_new_person(msg: Message):
    new_member = msg.new_chat_members[0]
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç [{new_member.first_name}](tg://user?id={str(new_member.id)})! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç —É—é—Ç–Ω—ã–π —á–∞—Ç–∏–∫!\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ø–æ—Å–∫–æ—Ä–µ–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏üò∏", parse_mode="Markdown")

@router.message()
async def text_answer(msg: Message):
    text = msg.text.lower()
    if (text == "–ø–∏–Ω–≥"):
        await msg.answer("–ü–û–ù–ìüèì")
    if (text == "–¥–∏–Ω—å"):
        await msg.answer("–î–û–ùüîî")
    if (text == "–±—É–º"):
        await msg.answer("–ë–û–úü•Å")
    if (text == "üíÉ"):
        await msg.answer("–¢–∞–Ω—Ü—É–π!üï∫")
    if (text == "üé§"):
        await msg.answer("–ú–Ø–£-–ú–Ø–£-–ú–Ø–£-–ú–Ø–Ø–Ø–Ø–Ø–£!üé∂")
    if ("–º—É—Ä" in text or "–º—è—É" in text):
        await msg.answer_sticker(random.choice(stickers))
    command = text.split(' ')
    if (command[0] == "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"):
        rand = random.randint(1, 5)
        if rand == 1:
            await msg.answer(f"üßôüèª‚Äç‚ôÇÔ∏è–°–≤—è—Ç–æ–π –ê–º—É—Ä –≥–æ–≤–æ—Ä–∏—Ç {random.randint(1, 100)}%")
        elif rand == 2:
            await msg.answer(f"üêà–ú—è—É! –î–∞ –∑–¥–µ—Å—å –≤—Å–µ {random.randint(1, 100)}%")
        elif rand == 3:
            await msg.answer(f"–ú–æ–∂–µ—Ç –±—ã—Ç—å {random.randint(1, 100)}%, –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ—Çüòú")
        elif rand == 4:
            await msg.answer(f"–ì–ª—É–±–æ–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∞ —Ç–∞–∫–∂–µ –∏–∑—É—á–∏–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {random.randint(1, 100)}% —è –º–æ–≥—É –∑–∞—è–≤–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ü§ì")
        elif rand == 5:
            await msg.answer(f"üïä–ü—Ç–∏—á–∫–∞ –Ω–∞—à–µ–ø—Ç–∞–ª–∞, —á—Ç–æ {random.randint(1, 100)}%")
import random

from aiogram import types, F, Router, Dispatcher, Bot
from aiogram.types import Message, ContentType, ChatPermissions
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta

router = Router()
f = open("TOKEN.txt")
token = f.read()
dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=token, parse_mode=ParseMode.HTML)

with open("stickers.txt") as file:
    stickers = file.readline().split(',')

@router.message(Command("start"))
async def start_message(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–≤—Ä–∏–∫! –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–±—Ä–µ–Ω—å–∫–∏–π –∫–æ—Ç–∏–∫, –∂–∏–≤—É—â–∏–π —Å–∞–º–æ–π –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω—å—é) –ù–∞–¥–µ—é—Å—å, –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è!üò∏‚ù§Ô∏è\n\n–ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª -> @How_Mavrik_was_made")

@router.message(Command("mute"))
async def mute(msg: Message):
    if (msg.chat.type != "supergroup"):
        await msg.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    else:
        if (msg.reply_to_message == "None"):
            await msg.answer("–ß—Ç–æ–±—ã –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /mute")
        else:
            chat_id = msg.chat.id
            person_id = msg.from_user.id
            person = await bot.get_chat_member(chat_id, person_id)
            person_mute_id = msg.reply_to_message.from_user.id
            person_mute = await bot.get_chat_member(chat_id, person_mute_id)
            if (person_mute.status == "creator"):
                await msg.answer("–° –æ–≥–Ω—ë–º —à—É—Ç–∫–∏ –ø–ª–æ—Ö–∏...")
            else:
                if (person.can_restrict_members == True and person_mute.status == "member" or person.status == 'creator'):
                    if (person_mute.can_send_messages == False):
                        await msg.answer("–ê—É! –û–Ω —É–∂–µ –∑–∞–º—É—á–µ–Ω, —Å–ª—ã—à–∏—à—å?")
                    else:
                        sms = msg.text.split(" ")
                        permissions = ChatPermissions(can_send_messages=False, can_send_audios=False, can_send_documents=False, can_send_photos=False, can_send_videos=False, can_send_video_notes=False, can_send_voice_notes=False, can_send_polls=False, can_send_other_messages=False)
                        if (len(sms) == 1):
                            await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions, until_date=datetime.now() + timedelta(minutes=15))
                        elif (len(sms) == 3):
                            time = sms[1]
                            if (time.isdigit() == False):
                                await msg.answer("–û–π –æ–π, —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                            else:
                                time = int(time)
                                if (sms[2] == "d"):
                                    await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions, until_date=datetime.now() + timedelta(days=time))
                                    if (time % 10 == 1 and time % 100 != 11):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –¥–µ–Ω—å", parse_mode="Markdown")
                                    elif ((time % 10 == 2 or time % 10 == 3 or time % 10 == 4) and time % 100 != 12 and time % 100 != 13 and time % 100 != 14):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –¥–Ω—è", parse_mode="Markdown")
                                    else:
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –¥–Ω–µ–π", parse_mode="Markdown")
                                elif (sms[2] == "m"):
                                    await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions, until_date=datetime.now() + timedelta(minutes=time))
                                    if (time % 10 == 1 and time % 100 != 11):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –º–∏–Ω—É—Ç—É", parse_mode="Markdown")
                                    elif ((time % 10 == 2 or time % 10 == 3 or time % 10 == 4) and time % 100 != 12 and time % 100 != 13 and time % 100 != 14):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –º–∏–Ω—É—Ç—ã", parse_mode="Markdown")
                                    else:
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –º–∏–Ω—É—Ç", parse_mode="Markdown")
                                elif (sms[2] == "h"):
                                    await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions, until_date=datetime.now() + timedelta(hours=time))
                                    if (time % 10 == 1 and time % 100 != 11):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} —á–∞—Å", parse_mode="Markdown")
                                    elif ((time % 10 == 2 or time % 10 == 3 or time % 10 == 4) and time % 100 != 12 and time % 100 != 13 and time % 100 != 14):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} —á–∞—Å–∞", parse_mode="Markdown")
                                    else:
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} —á–∞—Å–æ–≤", parse_mode="Markdown")
                                else:
                                    await msg.answer(f"–Ø –≥–æ—Ç–æ–≤ –∑–∞–º—É—Ç–∏—Ç—å [{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –Ω–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—á–∞—Å–æ–≤, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —Å–∫–æ–ª—å–∫–æ —ç—Ç–æüòø", parse_mode="Markdown")
                else:
                    await msg.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")

@router.message(Command("unmute"))
async def unmute(msg: Message):
    if (msg.chat.type != "supergroup"):
        await msg.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    else:
        if (msg.reply_to_message == "None"):
            await msg.answer("–ß—Ç–æ–±—ã —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /unmute")
        else:
            chat_id = msg.chat.id
            person_id = msg.from_user.id
            person = await bot.get_chat_member(chat_id, person_id)
            person_mute_id = msg.reply_to_message.from_user.id
            person_mute = await bot.get_chat_member(chat_id, person_mute_id)
            if (person.can_restrict_members == "True" or person.status == "creator"):
                permissions = ChatPermissions(can_send_messages=True, can_send_audios=True, can_send_documents=True, can_send_photos=True, can_send_videos=True, can_send_video_notes=True, can_send_voice_notes=True, can_send_polls=True, can_send_other_messages=True)
                await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions)
                await msg.answer(f"–°–≤—è—Ç—ã–µ –∫–æ—Ç–∏–∫–∏, [{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å! –ù–æ –≤–ø—Ä–µ–¥—å, –¥–µ—Ä–∂–∏ —è–∑—ã–∫ –∑–∞ –∑—É–±–∞–º–∏...", parse_mode="Markdown")

@router.message(F.new_chat_members)
async def hello_new_person(msg: Message):
    new_member = msg.new_chat_members[0]
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç [{new_member.first_name}](tg://user?id={str(new_member.id)})! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç —É—é—Ç–Ω—ã–π —á–∞—Ç–∏–∫!\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ø–æ—Å–∫–æ—Ä–µ–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏üò∏", parse_mode="Markdown")

@router.message()
async def text_answer(msg: Message):
    text = msg.text.lower()
    if (text == "–ø–∏–Ω–≥"):
        await msg.answer("–ü–û–ù–ìüèì")
    if (text == "–¥–∏–Ω—å"):
        await msg.answer("–î–û–ùüîî")
    if (text == "–±—É–º"):
        await msg.answer("–ë–û–úü•Å")
    if (text == "üíÉ"):
        await msg.answer("–¢–∞–Ω—Ü—É–π!üï∫")
    if (text == "üé§"):
        await msg.answer("–ú–Ø–£-–ú–Ø–£-–ú–Ø–£-–ú–Ø–Ø–Ø–Ø–Ø–£!üé∂")
    if ("–º—É—Ä" in text or "–º—è—É" in text):
        await msg.answer_sticker(random.choice(stickers))
    command = text.split(' ')
    if (command[0] == "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"):
        rand = random.randint(1, 5)
        if rand == 1:
            await msg.answer(f"üßôüèª‚Äç‚ôÇÔ∏è–°–≤—è—Ç–æ–π –ê–º—É—Ä –≥–æ–≤–æ—Ä–∏—Ç {random.randint(1, 100)}%")
        elif rand == 2:
            await msg.answer(f"üêà–ú—è—É! –î–∞ –∑–¥–µ—Å—å –≤—Å–µ {random.randint(1, 100)}%")
        elif rand == 3:
            await msg.answer(f"–ú–æ–∂–µ—Ç –±—ã—Ç—å {random.randint(1, 100)}%, –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ—Çüòú")
        elif rand == 4:
            await msg.answer(f"–ì–ª—É–±–æ–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∞ —Ç–∞–∫–∂–µ –∏–∑—É—á–∏–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {random.randint(1, 100)}% —è –º–æ–≥—É –∑–∞—è–≤–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ü§ì")
        elif rand == 5:
            await msg.answer(f"üïä–ü—Ç–∏—á–∫–∞ –Ω–∞—à–µ–ø—Ç–∞–ª–∞, —á—Ç–æ {random.randint(1, 100)}%")
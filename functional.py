import random


from aiogram import types, F, Router, Dispatcher, Bot
from aiogram.types import Message, ContentType, ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup, MessageEntity
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta

router = Router()
f = open("TOKEN.txt")
token = f.read()
dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=token, parse_mode=ParseMode.HTML)

santa_dict = {}

with open("stickers.txt") as file:
    stickers = file.readline().split(',')

@router.message(Command("start"))
async def start_message(msg: Message):
    text = msg.text.split(" ")
    user = msg.from_user.id
    if len(text) > 1:
        text = [text[0]] + text[1].split('-')
        key = '-100' + text[1]
        ms_key = text[2]
        if key in santa_dict and msg.chat.type == "private":
            chat = await bot.get_chat(key)
            if user in santa_dict[key]:
                await msg.answer("–¢—ã —É–∂–µ –∏–≥—Ä–∞–µ—à—å!")
            else:
                santa_dict[key].append(user)
                await msg.answer(f"üéÑ–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ –≤ —á–∞—Ç–µ *{chat.title}*", parse_mode="Markdown")
                sms = "–•–æ-—Ö–æ-—Ö–æ! –ê –∫—Ç–æ —ç—Ç–æ —É –Ω–∞—Å —Ä–µ—à–∏–ª –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—É?üéÖ\n\n–ò–≥—Ä–∞—é—Ç:\n"
                for i in range(0, len(santa_dict[key])):
                    person = await bot.get_chat_member(chat_id=key, user_id=santa_dict[key][i])
                    sms += f"{i + 1}. [{person.user.first_name}](tg://user?id={person.user.id})\n"
                    button = InlineKeyboardButton(text="–•–æ—á—É –±—ã—Ç—å –°–∞–Ω—Ç–æ–π", url=f"t.me/Mavrik_my_Bot?start={key[4:]}-{ms_key}")
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
                await bot.edit_message_text(chat_id=key, message_id=ms_key, text=sms, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await msg.answer("–ê–π-–∞–π, —à–∞–ª—É–Ω–∏—à–∫–∞!")
        return
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–≤—Ä–∏–∫! –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–±—Ä–µ–Ω—å–∫–∏–π –∫–æ—Ç–∏–∫, –∂–∏–≤—É—â–∏–π —Å–∞–º–æ–π –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω—å—é) –ù–∞–¥–µ—é—Å—å, –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è!üò∏‚ù§Ô∏è\n\n–ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª -> @How_Mavrik_was_made")

@router.message(Command("mute"))
async def mute(msg: Message):
    if (msg.chat.type != "supergroup"):
        await msg.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    else:
        if (msg.reply_to_message == None):
            await msg.answer("–ß—Ç–æ–±—ã –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /mute")
        else:
            chat_id = msg.chat.id
            person_id = msg.from_user.id
            person = await bot.get_chat_member(chat_id, person_id)
            person_mute_id = msg.reply_to_message.from_user.id
            person_mute = await bot.get_chat_member(chat_id, person_mute_id)
            if (person_mute.status == "creator"):
                await msg.answer("–° –æ–≥–Ω—ë–º —à—É—Ç–∫–∏ –ø–ª–æ—Ö–∏...")
            else:
                if (person.can_restrict_members == True and person_mute.status == "member" or person.status == 'creator'):
                    if (person_mute.can_send_messages == False):
                        await msg.answer("–ê—É! –û–Ω —É–∂–µ –∑–∞–º—É—á–µ–Ω, —Å–ª—ã—à–∏—à—å?")
                    else:
                        sms = msg.text.split(" ")
                        permissions = ChatPermissions(can_send_messages=False, can_send_audios=False, can_send_documents=False, can_send_photos=False, can_send_videos=False, can_send_video_notes=False, can_send_voice_notes=False, can_send_polls=False, can_send_other_messages=False, can_add_web_page_previews=False)
                        if (len(sms) == 1):
                            await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions, until_date=datetime.now() + timedelta(minutes=15))
                        elif (len(sms) == 3):
                            time = sms[1]
                            if (time.isdigit() == False):
                                await msg.answer("–û–π –æ–π, —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                            else:
                                time = int(time)
                                if (sms[2] == "d"):
                                    await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions, until_date=datetime.now() + timedelta(days=time))
                                    if (time % 10 == 1 and time % 100 != 11):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –¥–µ–Ω—å", parse_mode="Markdown")
                                    elif ((time % 10 == 2 or time % 10 == 3 or time % 10 == 4) and time % 100 != 12 and time % 100 != 13 and time % 100 != 14):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –¥–Ω—è", parse_mode="Markdown")
                                    else:
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –¥–Ω–µ–π", parse_mode="Markdown")
                                elif (sms[2] == "m"):
                                    await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions, until_date=datetime.now() + timedelta(minutes=time))
                                    if (time % 10 == 1 and time % 100 != 11):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –º–∏–Ω—É—Ç—É", parse_mode="Markdown")
                                    elif ((time % 10 == 2 or time % 10 == 3 or time % 10 == 4) and time % 100 != 12 and time % 100 != 13 and time % 100 != 14):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –º–∏–Ω—É—Ç—ã", parse_mode="Markdown")
                                    else:
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} –º–∏–Ω—É—Ç", parse_mode="Markdown")
                                elif (sms[2] == "h"):
                                    await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions, until_date=datetime.now() + timedelta(hours=time))
                                    if (time % 10 == 1 and time % 100 != 11):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} —á–∞—Å", parse_mode="Markdown")
                                    elif ((time % 10 == 2 or time % 10 == 3 or time % 10 == 4) and time % 100 != 12 and time % 100 != 13 and time % 100 != 14):
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} —á–∞—Å–∞", parse_mode="Markdown")
                                    else:
                                        await msg.answer(f"[{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {time} —á–∞—Å–æ–≤", parse_mode="Markdown")
                                else:
                                    await msg.answer(f"–Ø –≥–æ—Ç–æ–≤ –∑–∞–º—É—Ç–∏—Ç—å [{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) –Ω–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—á–∞—Å–æ–≤, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —Å–∫–æ–ª—å–∫–æ —ç—Ç–æüòø", parse_mode="Markdown")
                        else:
                            await msg.answer("–Ø —Ç–µ–±—è —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–Ω–∏–º–∞—é...")
                else:
                    await msg.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")

@router.message(Command("unmute"))
async def unmute(msg: Message):
    if (msg.chat.type != "supergroup"):
        await msg.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    else:
        if (msg.reply_to_message == None):
            await msg.answer("–ß—Ç–æ–±—ã —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /unmute")
        else:
            chat_id = msg.chat.id
            person_id = msg.from_user.id
            person = await bot.get_chat_member(chat_id, person_id)
            person_mute_id = msg.reply_to_message.from_user.id
            person_mute = await bot.get_chat_member(chat_id, person_mute_id)
            if (person.can_restrict_members == "True" or person.status == "creator"):
                permissions = ChatPermissions(can_send_messages=True, can_send_audios=True, can_send_documents=True, can_send_photos=True, can_send_videos=True, can_send_video_notes=True, can_send_voice_notes=True, can_send_polls=True, can_send_other_messages=True, can_add_web_page_previews=True)
                await bot.restrict_chat_member(chat_id=chat_id, user_id=person_mute_id, permissions=permissions)
                await msg.answer(f"–°–≤—è—Ç—ã–µ –∫–æ—Ç–∏–∫–∏, [{person_mute.user.first_name}](tg://user?id={str(person_mute_id)}) —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å! –ù–æ –≤–ø—Ä–µ–¥—å, –¥–µ—Ä–∂–∏ —è–∑—ã–∫ –∑–∞ –∑—É–±–∞–º–∏...", parse_mode="Markdown")
            else:
                await msg.answer("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

@router.message(Command("santa"))
async def santa(msg: Message):
    if (msg.chat.type != "supergroup"):
        await msg.answer("–Ø –±—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–¥–∞—Ä–∏–ª —Ç–µ–±–µ 10 –ø–æ–¥–∞—Ä–æ—á–∫–æ–≤, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    else:
        chat_id = str(msg.chat.id)
        person_id = msg.from_user.id
        person = await bot.get_chat_member(chat_id, person_id)
        if person.status != "administrator" and person.status != "creator":
            await msg.answer("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        ch_id = chat_id[4:]
        if chat_id in santa_dict:
            await msg.reply("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–π–Ω—ã—Ö —Å–∞–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
            return
        button = InlineKeyboardButton(text="–•–æ—á—É –±—ã—Ç—å –°–∞–Ω—Ç–æ–π", url=f"t.me/Mavrik_my_Bot?start={ch_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
        santa_dict[chat_id] = []
        mes = await msg.answer("–•–æ-—Ö–æ-—Ö–æ! –ê –∫—Ç–æ —ç—Ç–æ —É –Ω–∞—Å —Ä–µ—à–∏–ª –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—É?üéÖ", reply_markup=keyboard)
        mes_id = mes.message_id
        button = InlineKeyboardButton(text="–•–æ—á—É –±—ã—Ç—å –°–∞–Ω—Ç–æ–π", url=f"t.me/Mavrik_my_Bot?start={ch_id}-{mes_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=mes_id, reply_markup=keyboard)

@router.message(Command("start_santa"))
async def hey_santa(msg: Message):
    if (msg.chat.type != "supergroup"):
        await msg.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
        return
    else:
        chat_id = str(msg.chat.id)
        person_id = msg.from_user.id
        person = await bot.get_chat_member(chat_id, person_id)
        if person.status != "administrator" and person.status != "creator":
            await msg.answer("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        if chat_id in santa_dict:
            mas = santa_dict[chat_id]
            mas2 = list(mas)
            flag = True
            while flag:
                random.shuffle(mas2)
                k = 0
                for i in range(0, len(mas)):
                    if mas[i] == mas2[i]:
                        k += 1
                        break
                if k == 0:
                    flag = False
                    break
            for i in range(0, len(mas)):
                prs_id = mas[i]
                prs2_id = mas2[i]
                prs2 = await bot.get_chat(prs2_id)
                await bot.send_message(chat_id=prs_id, text=f"üéá–•–æ-—Ö–æ! –ù–∞ —ç—Ç–æ—Ç –ù–æ–≤—ã–π –ì–æ–¥ —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Ç–∞–π–Ω—ã–º —Å–∞–Ω—Ç–æ–π –¥–ª—è [{prs2.first_name}](tg://user?id={prs2.id})", parse_mode="Markdown")
            sms = "üéÅ–ñ–µ—Ä–µ–±—å—ë–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢–∞–π–Ω—ã–º–∏ –°–∞–Ω—Ç–∞–º–∏ —Å—Ç–∞–ª–∏:\n"
            for i in range(0, len(mas)):
                person = await bot.get_chat_member(chat_id=chat_id, user_id=santa_dict[chat_id][i])
                sms += f"{i + 1}. [{person.user.first_name}](tg://user?id={person.user.id})\n"
            await msg.answer(text=sms, parse_mode="Markdown")
            del santa_dict[chat_id]
        else:
            await msg.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å –∂–µ—Ä–µ–±—å—ë–≤–∫–∞. –ß—Ç–æ–±—ã –µ—ë –∑–∞–ø—É—Å—Ç–∏—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /santa")
@router.message(F.new_chat_members)
async def hello_new_person(msg: Message):
    new_member = msg.new_chat_members[0]
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç [{new_member.first_name}](tg://user?id={str(new_member.id)})! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç —É—é—Ç–Ω—ã–π —á–∞—Ç–∏–∫!\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ø–æ—Å–∫–æ—Ä–µ–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏üò∏", parse_mode="Markdown")
@router.message()
async def text_answer(msg: Message):
    if (msg.text == None):
        return
    text = msg.text.lower()
    if (text == "–ø–∏–Ω–≥"):
        await msg.answer("–ü–û–ù–ìüèì")
    if (text == "–¥–∏–Ω—å"):
        await msg.answer("–î–û–ùüîî")
    if (text == "–±—É–º"):
        await msg.answer("–ë–û–úü•Å")
    if (text == "üíÉ"):
        await msg.answer("–¢–∞–Ω—Ü—É–π!üï∫")
    if (text == "üé§"):
        await msg.answer("–ú–Ø–£-–ú–Ø–£-–ú–Ø–£-–ú–Ø–Ø–Ø–Ø–Ø–£!üé∂")
    if ("–º—É—Ä" in text or "–º—è—É" in text):
        await msg.answer_sticker(random.choice(stickers))
    command = text.split(' ')
    if (command[0] == "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"):
        rand = random.randint(1, 5)
        if rand == 1:
            await msg.answer(f"üßôüèª‚Äç‚ôÇÔ∏è–°–≤—è—Ç–æ–π –ê–º—É—Ä –≥–æ–≤–æ—Ä–∏—Ç {random.randint(1, 100)}%")
        elif rand == 2:
            await msg.answer(f"üêà–ú—è—É! –î–∞ –∑–¥–µ—Å—å –≤—Å–µ {random.randint(1, 100)}%")
        elif rand == 3:
            await msg.answer(f"–ú–æ–∂–µ—Ç –±—ã—Ç—å {random.randint(1, 100)}%, –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ—Çüòú")
        elif rand == 4:
            await msg.answer(f"–ì–ª—É–±–æ–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∞ —Ç–∞–∫–∂–µ –∏–∑—É—á–∏–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {random.randint(1, 100)}% —è –º–æ–≥—É –∑–∞—è–≤–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ü§ì")
        elif rand == 5:
            await msg.answer(f"üïä–ü—Ç–∏—á–∫–∞ –Ω–∞—à–µ–ø—Ç–∞–ª–∞, —á—Ç–æ {random.randint(1, 100)}%")